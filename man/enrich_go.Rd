% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enrich_go.R
\name{enrich_go}
\alias{enrich_go}
\title{Perform Gene Ontology (GO) Enrichment Analysis}
\usage{
enrich_go(
  gene,
  go.db,
  pAdjustMethod = "BH",
  p.adjust = 0.05,
  min.gene.set = 3,
  max.gene.set = NULL
)
}
\arguments{
\item{gene}{Character vector containing gene identifiers (e.g., gene symbols,
Ensembl IDs, or other identifiers) that correspond to differentially 
expressed genes for enrichment analysis}

\item{go.db}{Data frame containing GO annotation information. Must include
the following columns:
\itemize{
  \item \code{gene}: Gene identifiers matching those in the gene parameter
  \item \code{go.id}: GO term identifiers (e.g., "GO:0008150")
  \item \code{go.term}: GO term descriptions (e.g., "biological_process")
  \item \code{go.ontology}: Optional. GO ontology category (BP, MF, CC)
}}

\item{pAdjustMethod}{Method for multiple testing correction. Options include:
\itemize{
  \item \code{"BH"} (default): Benjamini-Hochberg false discovery rate
  \item \code{"bonferroni"}: Bonferroni correction
  \item \code{"holm"}: Holm's step-down procedure
  \item \code{"hochberg"}: Hochberg's procedure
  \item \code{"hommel"}: Hommel's procedure  
  \item \code{"BY"}: Benjamini-Yekutieli procedure
  \item \code{"fdr"}: Synonym for "BH"
  \item \code{"none"}: No correction
}}

\item{p.adjust}{Significance threshold for adjusted p-values (default: 0.05).
Only GO terms with adjusted p-values below this threshold will be returned}

\item{min.gene.set}{Minimum number of genes required in a GO term for testing
(default: 3). GO terms with fewer genes will be excluded}

\item{max.gene.set}{Maximum number of genes allowed in a GO term for testing
(default: length of input gene list). Very large GO terms can be excluded}
}
\value{
A data frame containing enrichment results with columns:
  \itemize{
    \item \code{ID}: GO term identifier
    \item \code{Description}: GO term description
    \item \code{GeneRatio}: Proportion of input genes in this GO term (numeric)
    \item \code{BgRatio}: Proportion of background genes in this GO term
    \item \code{pvalue}: Raw p-value from hypergeometric test
    \item \code{p.adjust}: Adjusted p-value using specified method
    \item \code{qvalue}: Q-value (if calculated)
    \item \code{geneID}: Gene identifiers contributing to this term (separated by "/")
    \item \code{Count}: Number of input genes in this GO term
    \item \code{gene.count}: Number of input genes in this GO term
    \item \code{total.genes}: Total number of input genes tested
  }
}
\description{
This function performs Gene Ontology enrichment analysis on a set of 
differentially expressed genes using a custom GO annotation database.
It identifies significantly over-represented GO terms and calculates
enrichment statistics with multiple testing correction.
}
\details{
This function uses the clusterProfiler package to perform over-representation
analysis (ORA) based on the hypergeometric distribution. The analysis tests
whether genes in your input list are significantly over-represented in specific
GO terms compared to what would be expected by chance.

The function converts the character-based GeneRatio (e.g., "5/100") to numeric
format for easier downstream analysis and plotting.
}
\note{
\itemize{
  \item Ensure gene identifiers in the input list match those in the GO database
  \item Remove duplicate genes from the input list for accurate statistics
  \item Consider the completeness of your GO annotation database
  \item Very small gene sets may not yield meaningful enrichment results
}
}
\examples{
library(biohelpers)
library(dplyr)

# Example 1: Basic GO enrichment analysis
# Note: These examples assume you have the required data objects
\dontrun{
data(df.rnaseq.go)     # GO annotation database
data(df.rnaseq.degs)   # Differentially expressed genes

# Basic enrichment analysis
go_results <- enrich_go(
  gene = df.rnaseq.degs$gene,
  go.db = df.rnaseq.go
)

print(head(go_results))
print(paste("Found", nrow(go_results), "enriched GO terms"))
}

# Example 2: Custom parameters
\dontrun{
# More stringent analysis with Bonferroni correction
go_results_strict <- enrich_go(
  gene = df.rnaseq.degs$gene,
  go.db = df.rnaseq.go,
  pAdjustMethod = "bonferroni",
  p.adjust = 0.01,
  min.gene.set = 5
)

print(go_results_strict)
}

# Example 3: Creating a simple GO database format
# This shows the required structure for go.db parameter
sample_go_db <- data.frame(
  gene = c("GENE1", "GENE2", "GENE3", "GENE1", "GENE4", "GENE5"),
  go.id = c("GO:0008150", "GO:0008150", "GO:0008150", 
            "GO:0003674", "GO:0003674", "GO:0005575"),
  go.term = c("biological_process", "biological_process", "biological_process",
              "molecular_function", "molecular_function", "cellular_component"),
  go.ontology = c("BP", "BP", "BP", "MF", "MF", "CC")
)

sample_genes <- c("GENE1", "GENE2", "GENE4")

# Run enrichment (will likely find no significant terms due to small size)
\dontrun{
sample_results <- enrich_go(
  gene = sample_genes,
  go.db = sample_go_db,
  p.adjust = 1.0  # Accept all terms for demonstration
)
print(sample_results)
}

# Example 4: Filtering by GO ontology
\dontrun{
# Filter GO database to only biological processes
bp_go_db <- df.rnaseq.go \%>\%
  filter(go.ontology == "BP" | is.na(go.ontology))

bp_results <- enrich_go(
  gene = df.rnaseq.degs$gene,
  go.db = bp_go_db,
  pAdjustMethod = "BH",
  p.adjust = 0.05
)

print(paste("Biological process terms found:", nrow(bp_results)))
}

}
