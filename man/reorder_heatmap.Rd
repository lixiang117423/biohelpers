% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reorder_heatmap.R
\name{reorder_heatmap}
\alias{reorder_heatmap}
\title{Intelligently reorder data for optimal heatmap visualization}
\usage{
reorder_heatmap(
  data,
  col,
  row,
  value,
  method = "peak",
  ties_method = "first",
  na_handling = "remove",
  verbose = TRUE
)
}
\arguments{
\item{data}{A data frame in long format (tidy format) containing the data 
to be reordered. Must contain columns specified by \code{col}, \code{row}, 
and \code{value} parameters.}

\item{col}{Character string specifying the column name containing sample 
identifiers (typically samples, conditions, or time points). This will 
become the columns in the heatmap.}

\item{row}{Character string specifying the column name containing feature 
identifiers (typically genes, metabolites, or other measured entities). 
This will become the rows in the heatmap.}

\item{value}{Character string specifying the column name containing the 
numerical values to be displayed in the heatmap (e.g., expression levels, 
abundances, intensities).}

\item{method}{Character string specifying the reordering method. Options:
\itemize{
  \item "peak" (default): Order by peak expression patterns
  \item "hierarchical": Use hierarchical clustering
  \item "mean": Order by mean values
}}

\item{ties_method}{Character string specifying how to handle ties when 
finding peak values. Options: "first", "last", "random". Default is "first".}

\item{na_handling}{Character string specifying how to handle missing values. 
Options: "remove", "zero", "mean". Default is "remove".}

\item{verbose}{Logical indicating whether to print progress information. 
Default is TRUE.}
}
\value{
A list containing four components:
\describe{
  \item{data.reordered}{A data frame with the same structure as input but 
    with reordered factor levels for optimal heatmap visualization.}
  \item{column.order}{A character vector showing the optimal column order 
    based on the number of features that peak in each column.}
  \item{row.order}{A character vector showing the optimal row order based 
    on peak expression patterns.}
  \item{peak.summary}{A summary data frame showing where each feature peaks 
    and how many features peak in each column.}
}
}
\description{
Reorder rows and columns of data in long format to optimize heatmap 
visualization by grouping features based on their peak expression patterns.
This function identifies where each feature reaches its maximum value and 
groups similar patterns together to reveal biological clusters and trends.
}
\details{
The reordering algorithm works by:
\enumerate{
  \item Identifying where each feature (row) reaches its maximum value
  \item Counting how many features peak in each sample (column)  
  \item Ordering columns by the number of features that peak there
  \item Ordering rows by their peak expression patterns
}

This approach reveals:
\itemize{
  \item Co-expression patterns and modules
  \item Temporal expression cascades in time-series data
  \item Treatment-specific responses
  \item Functional groupings of features
}
}
\note{
\itemize{
  \item Input data must be in long (tidy) format, not wide format
  \item The function assumes higher values represent higher expression/activity
  \item For count data, consider log-transformation before reordering
  \item Missing values are handled according to the na_handling parameter
}
}
\examples{
library(dplyr)
library(biohelpers)

# Load example metabolomics data
data(df.reorder2heatmap)

# Basic reordering for heatmap visualization
reorder_result <- reorder_heatmap(
  data = df.reorder2heatmap,
  col = "sample",
  row = "meta", 
  value = "value"
)

# View reordered data
head(reorder_result$data.reordered)

# Check peak summary
reorder_result$peak.summary

# View column and row orders
reorder_result$column.order
head(reorder_result$row.order)

# Use the reordered data for heatmap
library(ggplot2)
reorder_result$data.reordered \%>\%
  ggplot(aes(x = col, y = row, fill = value)) +
  geom_tile() +
  scale_fill_viridis_c() +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Alternative reordering methods
reorder_hierarchical <- reorder_heatmap(
  data = df.reorder2heatmap,
  col = "sample",
  row = "meta",
  value = "value", 
  method = "hierarchical"
)

# Create example time-series data
time_series_data <- data.frame(
  gene = rep(paste0("Gene_", 1:20), each = 6),
  timepoint = rep(paste0("T", 1:6), 20),
  expression = c(
    # Early genes
    rep(c(10, 8, 4, 2, 1, 1), 5),
    # Mid genes  
    rep(c(2, 6, 10, 8, 3, 1), 5),
    # Late genes
    rep(c(1, 2, 3, 6, 10, 8), 5),
    # Constitutive genes
    rep(c(5, 5, 5, 5, 5, 5), 5)
  ) + rnorm(120, 0, 0.5)
)

# Reorder time-series data
time_reordered <- reorder_heatmap(
  data = time_series_data,
  col = "timepoint", 
  row = "gene",
  value = "expression"
)

}
