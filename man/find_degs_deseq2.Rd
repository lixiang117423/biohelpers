% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_degs_deseq2.R
\name{find_degs_deseq2}
\alias{find_degs_deseq2}
\title{Identify Differentially Expressed Genes Using DESeq2}
\usage{
find_degs_deseq2(
  data,
  sample,
  formula = ~group,
  log2FoldChange = 1,
  padj = 0.05,
  shrink.lfc = TRUE,
  independent.filtering = TRUE,
  alpha = 0.1
)
}
\arguments{
\item{data}{Integer count matrix where rows represent genes and columns
represent samples. Row names should be gene identifiers (e.g., gene symbols,
Ensembl IDs) and column names should match sample identifiers in the sample
metadata. All values must be non-negative integers representing raw counts
(not normalized, FPKM, or TPM values)}

\item{sample}{Data frame containing sample metadata where rows represent
samples and columns contain experimental factors and covariates. Row names
should exactly match column names in the count matrix. Must contain variables
referenced in the design formula}

\item{formula}{Design formula specifying the experimental design for DESeq2.
Default is \code{~group}, assuming a "group" column exists in sample metadata.
Common examples:
\itemize{
  \item \code{~condition}: Simple two-group comparison
  \item \code{~condition + batch}: Control for batch effects
  \item \code{~condition + sex + age}: Multiple covariates
  \item \code{~condition * time}: Interaction terms for time series
}}

\item{log2FoldChange}{Minimum absolute log2 fold change threshold for
significance classification (default: 1, equivalent to 2-fold change).
Genes with |log2FC| >= this value AND padj < padj threshold are considered
differentially expressed. Use 0.5 for 1.4-fold, 1.5 for 3-fold changes}

\item{padj}{Adjusted p-value (FDR) threshold for statistical significance
(default: 0.05). Genes with Benjamini-Hochberg adjusted p-values below
this threshold are considered statistically significant}

\item{shrink.lfc}{Logical indicating whether to apply log2 fold change
shrinkage (default: TRUE). Shrinkage reduces noise in log2FC estimates
for genes with low counts, providing more accurate effect size estimates}

\item{independent.filtering}{Logical indicating whether to perform independent
filtering (default: TRUE). Filters out genes with very low counts to
improve multiple testing correction and statistical power}

\item{alpha}{Alpha level for outlier detection and Cook's distance filtering
(default: 0.1). Lower values are more stringent for outlier detection}
}
\value{
A data frame containing differential expression results with columns:
  \itemize{
    \item \code{gene}: Gene identifiers (from row names of input matrix)
    \item \code{baseMean}: Mean normalized counts across all samples  
    \item \code{log2FoldChange}: Log2 fold change between conditions
    \item \code{lfcSE}: Standard error of log2 fold change estimate
    \item \code{stat}: Wald test statistic
    \item \code{pvalue}: Raw p-value from Wald test
    \item \code{padj}: Benjamini-Hochberg adjusted p-value (FDR)
    \item \code{regulation}: Gene regulation classification:
      \itemize{
        \item "Up-regulated": log2FC > threshold & padj < threshold
        \item "Down-regulated": log2FC < -threshold & padj < threshold
        \item "Not significant": Does not meet both criteria
      }
    \item \code{fold_change}: Actual fold change (2^log2FoldChange)
    \item \code{abs_log2fc}: Absolute log2 fold change for ranking
    \item \code{significance_level}: Detailed significance classification
  }
}
\description{
This function performs differential gene expression analysis using DESeq2's
negative binomial generalized linear model. It identifies genes that are
significantly up-regulated or down-regulated between experimental conditions,
accounting for library size differences and biological variability. DESeq2
is the gold standard for RNA-seq differential expression analysis.
}
\details{
DESeq2 workflow implemented in this function:
\enumerate{
  \item \strong{Create DESeqDataSet}: Combines count matrix with sample metadata
  \item \strong{Size factor estimation}: Normalizes for library size differences
  \item \strong{Dispersion estimation}: Estimates gene-wise and fitted dispersions
  \item \strong{Negative binomial GLM fitting}: Fits model for each gene
  \item \strong{Wald tests}: Tests for differential expression
  \item \strong{Multiple testing correction}: Applies Benjamini-Hochberg FDR
  \item \strong{Log2FC shrinkage}: Reduces noise in effect size estimates (optional)
}

Key assumptions and requirements:
\itemize{
  \item Count data follows negative binomial distribution
  \item Genes are independent (after accounting for design factors)
  \item Samples are independent biological replicates
  \item At least 3 replicates per condition (6+ recommended)
  \item Input data are raw integer counts, not normalized values
}
}
\note{
\itemize{
  \item Input must be raw counts (integers), not normalized data
  \item Genes with very low counts may be filtered automatically
  \item DESeq2 handles library size normalization internally
  \item Consider batch correction for multi-batch experiments
  \item Results are sorted by adjusted p-value and absolute fold change
}
}
\examples{
library(biohelpers)
library(dplyr)

# Example 1: Basic differential expression analysis
\dontrun{
# Load example RNA-seq data
data(df.rnaseq.gene)    # Gene count matrix
data(df.rnaseq.sample)  # Sample metadata

# Basic DE analysis
de_results <- find_degs_deseq2(
  data = df.rnaseq.gene,
  sample = df.rnaseq.sample
)

# View results summary
print(table(de_results$regulation))

# Top up-regulated genes
upregulated <- de_results \%>\%
  filter(regulation == "Up-regulated") \%>\%
  arrange(padj) \%>\%
  head(10)

print("Top up-regulated genes:")
print(upregulated[, c("gene", "log2FoldChange", "padj", "baseMean")])

# Top down-regulated genes  
downregulated <- de_results \%>\%
  filter(regulation == "Down-regulated") \%>\%
  arrange(padj) \%>\%
  head(10)

print("Top down-regulated genes:")
print(downregulated[, c("gene", "log2FoldChange", "padj", "baseMean")])
}

# Example 2: Custom thresholds and batch correction
\dontrun{
# More stringent analysis with batch correction
de_strict <- find_degs_deseq2(
  data = df.rnaseq.gene,
  sample = df.rnaseq.sample,
  formula = ~batch + condition,    # Control for batch effects
  log2FoldChange = 1.5,           # 3-fold change threshold
  padj = 0.01,                    # 1\% FDR
  shrink.lfc = TRUE,              # Apply LFC shrinkage
  independent.filtering = TRUE     # Enable independent filtering
)

print(paste("Strict analysis found", 
            sum(de_strict$regulation != "Not significant"), 
            "DE genes"))

# Compare effect sizes
effect_comparison <- de_strict \%>\%
  filter(regulation != "Not significant") \%>\%
  summarise(
    mean_abs_lfc = mean(abs_log2fc),
    median_abs_lfc = median(abs_log2fc),
    max_abs_lfc = max(abs_log2fc)
  )
print("Effect size summary:")
print(effect_comparison)
}

# Example 3: Time series analysis
\dontrun{
# Longitudinal RNA-seq experiment
# Assume sample metadata has 'timepoint' and 'subject' columns
timeseries_de <- find_degs_deseq2(
  data = df.rnaseq.gene,
  sample = df.rnaseq.sample,
  formula = ~subject + timepoint,  # Control for subject effects
  log2FoldChange = 0.5,           # More sensitive for time effects
  padj = 0.1                      # Less stringent for discovery
)

# Identify time-responsive genes
time_responsive <- timeseries_de \%>\%
  filter(regulation != "Not significant") \%>\%
  arrange(desc(abs_log2fc))

print(paste("Time-responsive genes:", nrow(time_responsive)))

# Expression magnitude categories
magnitude_summary <- time_responsive \%>\%
  mutate(
    magnitude = case_when(
      abs_log2fc >= 2 ~ "High (4+ fold)",
      abs_log2fc >= 1 ~ "Medium (2-4 fold)", 
      TRUE ~ "Low (<2 fold)"
    )
  ) \%>\%
  count(regulation, magnitude)

print("Expression change magnitudes:")
print(magnitude_summary)
}

# Example 4: Creating sample count data
# This demonstrates the required data format
set.seed(123)
n_genes <- 1000
n_samples <- 12

# Simulate count data (negative binomial distribution)
mock_counts <- matrix(
  rnbinom(n_genes * n_samples, size = 10, mu = 50),
  nrow = n_genes,
  ncol = n_samples,
  dimnames = list(
    paste0("Gene_", 1:n_genes),
    paste0("Sample_", 1:n_samples)
  )
)

# Add some differentially expressed genes
de_genes <- sample(1:n_genes, 100)  # 10\% DE genes
up_genes <- de_genes[1:50]
down_genes <- de_genes[51:100]

# Simulate higher expression in treatment samples (7-12)
mock_counts[up_genes, 7:12] <- mock_counts[up_genes, 7:12] * 3
mock_counts[down_genes, 7:12] <- round(mock_counts[down_genes, 7:12] * 0.3)

# Create sample metadata
mock_sample <- data.frame(
  row.names = colnames(mock_counts),
  group = rep(c("Control", "Treatment"), each = 6),
  batch = rep(c("Batch1", "Batch2"), times = 6),
  replicate = rep(1:6, times = 2)
)

\dontrun{
# Run DE analysis on simulated data
mock_de <- find_degs_deseq2(
  data = mock_counts,
  sample = mock_sample,
  formula = ~group
)

print("Simulated data DE analysis:")
print(table(mock_de$regulation))

# Check recovery of simulated DE genes
recovered_up <- sum(paste0("Gene_", up_genes) \%in\% 
                    mock_de$gene[mock_de$regulation == "Up-regulated"])
recovered_down <- sum(paste0("Gene_", down_genes) \%in\% 
                      mock_de$gene[mock_de$regulation == "Down-regulated"])

print(paste("Recovered", recovered_up, "of", length(up_genes), "up-regulated genes"))
print(paste("Recovered", recovered_down, "of", length(down_genes), "down-regulated genes"))
}

# Example 5: Quality control and filtering
\dontrun{
# Pre-analysis quality control
raw_counts <- df.rnaseq.gene

# Check sequencing depth
library_sizes <- colSums(raw_counts)
print(paste("Library sizes range:", min(library_sizes), "to", max(library_sizes)))

# Filter low-expressed genes (optional pre-filtering)
# Keep genes with at least 10 counts in at least 25\% of samples
min_counts <- 10
min_samples <- ceiling(0.25 * ncol(raw_counts))
keep_genes <- rowSums(raw_counts >= min_counts) >= min_samples

filtered_counts <- raw_counts[keep_genes, ]
print(paste("Retained", nrow(filtered_counts), "of", nrow(raw_counts), 
            "genes after filtering"))

# Run analysis on filtered data
filtered_de <- find_degs_deseq2(
  data = filtered_counts,
  sample = df.rnaseq.sample,
  formula = ~group
)

print("Filtered analysis results:")
print(table(filtered_de$regulation))
}

}
\references{
Love, M.I., Huber, W., Anders, S. (2014) Moderated estimation of fold change
and dispersion for RNA-seq data with DESeq2. Genome Biology, 15, 550.

Anders, S. and Huber, W. (2010) Differential expression analysis for sequence
count data. Genome Biology, 11, R106.
}
\seealso{
\itemize{
  \item \code{\link{volcano_plot}} for visualization of DE results
  \item \code{\link{enrich_go}} for functional enrichment of DE genes
  \item \code{\link{enrich_kegg}} for pathway enrichment analysis
}
}
