% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/df_to_list.R
\name{df_to_list}
\alias{df_to_list}
\title{Convert Data Frame to Named List for Set Analysis and Venn Diagrams}
\usage{
df_to_list(data, group, value)
}
\arguments{
\item{data}{A data frame containing at least two columns: one for grouping
and one for values}

\item{group}{Column name (as string) that contains the group identifiers.
This will become the names of the list elements}

\item{value}{Column name (as string) that contains the values to be grouped.
These values will be collected into vectors for each group}
}
\value{
A named list where:
  \itemize{
    \item Each element name corresponds to a unique group from the group column
    \item Each element contains a vector of all values belonging to that group
    \item Missing values (NA) are automatically removed from each group
    \item Empty groups (after NA removal) are retained as empty vectors
  }
}
\description{
This function converts a data frame with group-value pairs into a named list
where each element contains all values belonging to a specific group. This
format is commonly used for Venn diagram plotting, set analysis, and overlap
studies in biological data analysis.
}
\details{
This function is particularly useful for preparing data for:
\itemize{
  \item Venn diagram creation (using packages like VennDiagram, ggVennDiagram)
  \item Set overlap analysis
  \item Gene/feature intersection studies
  \item Comparative analysis between different experimental conditions
}

The function handles missing values by removing them from the final lists,
ensuring clean input for downstream analysis tools. The order of groups
in the resulting list follows the order of first appearance in the input data.
}
\note{
\itemize{
  \item The input data frame should contain unique group-value combinations
  \item Duplicate values within the same group will be preserved
  \item Missing values in either group or value columns are handled gracefully
}
}
\examples{
library(biohelpers)
library(dplyr)

# Example 1: Basic usage with gene lists
gene_data <- data.frame(
  condition = c(rep("Treatment_A", 5), rep("Treatment_B", 5), rep("Control", 4)),
  gene_id = c("GENE1", "GENE2", "GENE3", "GENE4", "GENE5",
              "GENE3", "GENE4", "GENE6", "GENE7", "GENE8", 
              "GENE1", "GENE9", "GENE10", "GENE11")
)

gene_list <- df_to_list(
  data = gene_data,
  group = "condition", 
  value = "gene_id"
)
print(gene_list)
print(lengths(gene_list))  # Number of genes per condition

# Example 2: Creating overlapping sets (original example improved)
df_A <- data.frame(group = "A", value = 1:10)
df_B <- data.frame(group = "B", value = 3:12) 
df_C <- data.frame(group = "C", value = 7:20)

combined_data <- dplyr::bind_rows(df_A, df_B, df_C)

overlap_sets <- df_to_list(
  data = combined_data,
  group = "group",
  value = "value"
)
print(overlap_sets)

# Find intersections
intersection_AB <- intersect(overlap_sets$A, overlap_sets$B)
intersection_BC <- intersect(overlap_sets$B, overlap_sets$C)
intersection_AC <- intersect(overlap_sets$A, overlap_sets$C)
intersection_ABC <- intersect(intersection_AB, overlap_sets$C)

print(paste("A ∩ B:", paste(intersection_AB, collapse = ", ")))
print(paste("B ∩ C:", paste(intersection_BC, collapse = ", ")))
print(paste("A ∩ C:", paste(intersection_AC, collapse = ", ")))
print(paste("A ∩ B ∩ C:", paste(intersection_ABC, collapse = ", ")))

# Example 3: Real biological application - DEG analysis
deg_results <- data.frame(
  comparison = c(rep("TreatmentA_vs_Control", 6),
                 rep("TreatmentB_vs_Control", 5),
                 rep("TreatmentA_vs_TreatmentB", 4)),
  gene = c("ATG1", "ATG2", "PTEN", "TP53", "MYC", "EGFR",
           "ATG1", "PTEN", "BRCA1", "BRCA2", "MYC",
           "TP53", "MYC", "EGFR", "KRAS")
)

deg_lists <- df_to_list(
  data = deg_results,
  group = "comparison",
  value = "gene"
)

print("DEG lists for Venn diagram:")
print(deg_lists)

# Example 4: Handling missing values
data_with_na <- data.frame(
  category = c("Group1", "Group1", "Group2", "Group2", "Group1"),
  item = c("A", NA, "B", "C", "D")
)

clean_list <- df_to_list(
  data = data_with_na,
  group = "category",
  value = "item"
)
print("Data with NA values handled:")
print(clean_list)

}
